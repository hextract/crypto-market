// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Receives incoming orders",
    "title": "connector.receiver",
    "version": "0.0.0"
  },
  "paths": {
    "/info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Get info",
        "operationId": "info",
        "responses": {
          "200": {
            "description": "Info got",
            "schema": {
              "properties": {
                "info": {
                  "type": "string",
                  "default": "Connector's reporter service"
                }
              }
            }
          }
        }
      }
    },
    "/place_order": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Place order",
        "operationId": "receive_order",
        "parameters": [
          {
            "description": "Receiving order eventually to execute",
            "name": "object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order received and soon will be executed",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "error_status_code"
      ],
      "properties": {
        "error_message": {
          "type": "string"
        },
        "error_status_code": {
          "type": "integer"
        }
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "user_id",
        "type",
        "indicator",
        "price",
        "volume",
        "ticker"
      ],
      "properties": {
        "indicator": {
          "type": "string",
          "enum": [
            "buy",
            "sell"
          ]
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "ticker": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "market",
            "limit"
          ]
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        },
        "volume": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Success": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "default": "Successful operation"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Some tag description",
      "name": "some tag"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Receives incoming orders",
    "title": "connector.receiver",
    "version": "0.0.0"
  },
  "paths": {
    "/info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Get info",
        "operationId": "info",
        "responses": {
          "200": {
            "description": "Info got",
            "schema": {
              "properties": {
                "info": {
                  "type": "string",
                  "default": "Connector's reporter service"
                }
              }
            }
          }
        }
      }
    },
    "/place_order": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Place order",
        "operationId": "receive_order",
        "parameters": [
          {
            "description": "Receiving order eventually to execute",
            "name": "object",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order received and soon will be executed",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "error_status_code"
      ],
      "properties": {
        "error_message": {
          "type": "string"
        },
        "error_status_code": {
          "type": "integer"
        }
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "user_id",
        "type",
        "indicator",
        "price",
        "volume",
        "ticker"
      ],
      "properties": {
        "indicator": {
          "type": "string",
          "enum": [
            "buy",
            "sell"
          ]
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "ticker": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "market",
            "limit"
          ]
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        },
        "volume": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Success": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "default": "Successful operation"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Some tag description",
      "name": "some tag"
    }
  ]
}`))
}

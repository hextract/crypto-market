// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"receiver/internal/presentation/web/dto"
)

// ReceiveOrderOKCode is the HTTP code returned for type ReceiveOrderOK
const ReceiveOrderOKCode int = 200

/*
ReceiveOrderOK Order received and soon will be executed

swagger:response receiveOrderOK
*/
type ReceiveOrderOK struct {

	/*
	  In: Body
	*/
	Payload *dto.Success `json:"body,omitempty"`
}

// NewReceiveOrderOK creates ReceiveOrderOK with default headers values
func NewReceiveOrderOK() *ReceiveOrderOK {

	return &ReceiveOrderOK{}
}

// WithPayload adds the payload to the receive order o k response
func (o *ReceiveOrderOK) WithPayload(payload *dto.Success) *ReceiveOrderOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the receive order o k response
func (o *ReceiveOrderOK) SetPayload(payload *dto.Success) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReceiveOrderOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReceiveOrderInternalServerErrorCode is the HTTP code returned for type ReceiveOrderInternalServerError
const ReceiveOrderInternalServerErrorCode int = 500

/*
ReceiveOrderInternalServerError Something went wrong

swagger:response receiveOrderInternalServerError
*/
type ReceiveOrderInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *dto.Error `json:"body,omitempty"`
}

// NewReceiveOrderInternalServerError creates ReceiveOrderInternalServerError with default headers values
func NewReceiveOrderInternalServerError() *ReceiveOrderInternalServerError {

	return &ReceiveOrderInternalServerError{}
}

// WithPayload adds the payload to the receive order internal server error response
func (o *ReceiveOrderInternalServerError) WithPayload(payload *dto.Error) *ReceiveOrderInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the receive order internal server error response
func (o *ReceiveOrderInternalServerError) SetPayload(payload *dto.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReceiveOrderInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

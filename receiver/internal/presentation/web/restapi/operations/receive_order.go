// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReceiveOrderHandlerFunc turns a function with the right signature into a receive order handler
type ReceiveOrderHandlerFunc func(ReceiveOrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReceiveOrderHandlerFunc) Handle(params ReceiveOrderParams) middleware.Responder {
	return fn(params)
}

// ReceiveOrderHandler interface for that can handle valid receive order params
type ReceiveOrderHandler interface {
	Handle(ReceiveOrderParams) middleware.Responder
}

// NewReceiveOrder creates a new http.Handler for the receive order operation
func NewReceiveOrder(ctx *middleware.Context, handler ReceiveOrderHandler) *ReceiveOrder {
	return &ReceiveOrder{Context: ctx, Handler: handler}
}

/*
	ReceiveOrder swagger:route POST /place_order receiveOrder

Place order
*/
type ReceiveOrder struct {
	Context *middleware.Context
	Handler ReceiveOrderHandler
}

func (o *ReceiveOrder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewReceiveOrderParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

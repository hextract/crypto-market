services:
  db:
    networks:
      - net
    image: postgres:16.4-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./scripts/multiple_db.sh:/docker-entrypoint-initdb.d/multiple_db.sh
      - ./scripts/init_sql:/docker-entrypoint-initdb.d/init_sql
    env_file:
      - .env
    expose:
      - ${POSTGRES_PORT}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    command: -p ${POSTGRES_PORT}
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  main:
    networks:
      - net
    container_name: main-svc
    env_file:
      - .env
    build:
      context: ./
      dockerfile: main/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${MAIN_REST_PORT}:${MAIN_REST_PORT}"
  auth:
    networks:
      - net
    container_name: auth-svc
    build:
      context: ./
      dockerfile: ./auth/Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      main:
        condition: service_started
    ports:
      - "${AUTH_REST_PORT}:${AUTH_REST_PORT}"

  matching_engine:
    container_name: engine-svc
    networks:
      - net
    env_file:
      - matching_engine/.env
    build:
      context: ./matching_engine
      dockerfile: Dockerfile
    ports:
      - "18888:18888"

  keycloak:
    networks:
      - net
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: start -Dkeycloak.import=/opt/keycloak/data/import/realm-export.json --import-realm --db postgres --hostname-strict false --http-enabled true
    environment:
      KC_DB_URL: jdbc:postgresql://db:${POSTGRES_PORT}/${AUTH_DB_NAME}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_SCHEMA: public
      KC_FEATURES: preview
      KC_LOG_LEVEL: ERROR
    env_file:
      - .env
    volumes:
      - type: bind
        source: ./keycloak/config/realm-export.json
        target: /opt/keycloak/data/import/realm-export.json
    ports:
      - ${KEYCLOAK_PORT}:${KEYCLOAK_INNER_PORT}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "/opt/keycloak/bin/kc.sh", "show-config" ]
      start_period: 10s
      interval: 10s
      retries: 5
      timeout: 5s
  frontend:
    networks:
      - net
    container_name: frontend-svc
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - VIRTUAL_HOST=cont-exchange.ru
      - LETSENCRYPT_HOST=cont-exchange.ru
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    depends_on:
      - main
      - auth
    volumes:
      - ./frontend:/app
      - /app/node_modules

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - certs:/etc/nginx/certs
    networks:
      - net
    depends_on:
      - frontend
      - matching_engine
      - auth
      - main

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - certs:/etc/letsencrypt
      - ./certbot/logs:/var/log/letsencrypt
    networks:
      - net
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot certonly --webroot -w /etc/letsencrypt/webroot -d cont-exchange.ru -d main.cont-exchange.ru -d auth.cont-exchange.ru -d engine.cont-exchange.ru --non-interactive --agree-tos --email your-email@example.com --deploy-hook \"nginx -s reload\"; certbot renew; sleep 12h; done'"

#  redpanda:
#    command: ${REDPANDA_START_COMMAND}
#    env_file:
#      - .env
#    image: docker.redpanda.com/redpandadata/redpanda:v24.2.8
#    container_name: redpanda
#    volumes:
#      - redpanda-volume:/var/lib/redpanda/data
#    ports:
#      - "1${REDPANDA_REST_PORT}:${REDPANDA_REST_PORT}"
#    healthcheck:
#      test: [ "CMD", "rpk", "cluster", "health" ]
#      interval: 10s
#      timeout: 5s
#      retries: 3
#    networks:
#      - net
#  redpanda-console:
#    container_name: redpanda-console
#    image: docker.redpanda.com/redpandadata/console:v2.7.2
#    entrypoint: /bin/sh
#    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > ${CONSOLE_CONFIG_FILEPATH}; /app/console'
#    env_file:
#      - .env
#    environment:
#      CONFIG_FILEPATH: ${CONSOLE_CONFIG_FILEPATH}
#      CONSOLE_CONFIG_FILE: |
#        kafka:
#          brokers: ["redpanda:${REDPANDA_REST_PORT}"]
#        redpanda:
#          adminApi:
#            enabled: true
#            urls: ["http://redpanda:${ADMIN_API_PORT}"]
#    ports:
#      - "${CONSOLE_REST_PORT}:${CONSOLE_REST_PORT}"
#    depends_on:
#      - redpanda
#    networks:
#      - net
#  receiver:
#    container_name: receiver
#    env_file:
#      - .env
#    build:
#      context: ./
#      dockerfile: ./receiver/Dockerfile
#    depends_on:
#      redpanda:
#        condition: service_healthy
#    ports:
#      - "${RECEIVER_REST_PORT}:${RECEIVER_REST_PORT}"
#    networks:
#      - net
#  executor:
#    container_name: executor
#    env_file:
#      - .env
#    build:
#      context: ./
#      dockerfile: ./executor/Dockerfile
#    depends_on:
#      redpanda:
#        condition: service_healthy
#    ports:
#      - "${EXECUTOR_REST_PORT}:${EXECUTOR_REST_PORT}"
#    networks:
#      - net
#  reporter:
#    container_name: reporter
#    env_file:
#      - .env
#    build:
#      context: ./
#      dockerfile: ./reporter/Dockerfile
#    depends_on:
#      redpanda:
#        condition: service_healthy
#    ports:
#      - "${REPORTER_REST_PORT}:${REPORTER_REST_PORT}"
#    networks:
#      - net
#  fetcher:
#    container_name: fetcher
#    env_file:
#      - .env
#    build:
#      context: ./
#      dockerfile: ./fetcher/Dockerfile
#    depends_on:
#      redpanda:
#        condition: service_healthy
#    ports:
#      - "${FETCHER_REST_PORT}:${FETCHER_REST_PORT}"
#    networks:
#      - net
#  generator:
#    container_name: generator
#    env_file:
#      - .env
#    build:
#      context: ./
#      dockerfile: ./generator/Dockerfile
#    depends_on:
#      redpanda:
#        condition: service_healthy
#    ports:
#      - "${GENERATOR_REST_PORT}:${GENERATOR_REST_PORT}"
#    networks:
#      - net

volumes:
  postgres_data:
  certs:
  redpanda-volume:

networks:
  net:
    driver: bridge
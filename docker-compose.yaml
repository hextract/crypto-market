services:
  db:
    networks:
      - net
    image: postgres:16.4-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./scripts/multiple_db.sh:/docker-entrypoint-initdb.d/multiple_db.sh
      - ./scripts/init_sql:/docker-entrypoint-initdb.d/init_sql
    env_file:
      - .env
    expose:
      - ${POSTGRES_PORT}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    command: -p ${POSTGRES_PORT}
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  main:
    networks:
      - net
    container_name: main-svc
    env_file:
      - .env
    build:
      context: ./
      dockerfile: main/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${MAIN_REST_PORT}:${MAIN_REST_PORT}"
  auth:
    networks:
      - net
    container_name: auth-svc
    build:
      context: ./
      dockerfile: ./auth/Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${AUTH_REST_PORT}:${AUTH_REST_PORT}"

  keycloak:
    networks:
      - net
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: start -Dkeycloak.import=/opt/keycloak/data/import/realm-export.json --import-realm --db postgres --hostname-strict false --http-enabled true
    environment:
      KC_DB_URL: jdbc:postgresql://db:${POSTGRES_PORT}/${AUTH_DB_NAME}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_SCHEMA: public
      KC_FEATURES: preview
      KC_LOG_LEVEL: ERROR
    env_file:
      - .env
    volumes:
      - type: bind
        source: ./keycloak/config/realm-export.json
        target: /opt/keycloak/data/import/realm-export.json
    ports:
      - ${KEYCLOAK_PORT}:${KEYCLOAK_INNER_PORT}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "/opt/keycloak/bin/kc.sh", "show-config" ]
      start_period: 10s
      interval: 10s
      retries: 5
      timeout: 5s

  zookeeper:
    networks:
      - net
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    networks:
      - net
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    tmpfs:
      - /kafka
    healthcheck:
      test: [ "CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092" ]
      interval: 5s
      timeout: 5s
      retries: 10


  frontend:
    networks:
      - net
    container_name: frontend-svc
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - VIRTUAL_HOST=cont-exchange.ru,213.171.24.206
      - LETSENCRYPT_HOST=cont-exchange.ru
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    depends_on:
      - main
      - auth
    volumes:
      - ./frontend:/app
      - /app/node_modules

  matching_engine:
    container_name: engine-svc
    networks:
      - net
    env_file:
      - matching_engine/.env
    build:
      context: ./matching_engine
      dockerfile: Dockerfile
    ports:
      - "${MARKET_MAKER_PORT}:${MARKET_MAKER_PORT}"
  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certs:/etc/nginx/certs:ro
      - vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - net
    depends_on:
      - frontend

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes:
      - certs:/etc/nginx/certs
      - vhost.d:/etc/nginx/vhost.d
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - net
    depends_on:
      - nginx-proxy

volumes:
  postgres_data:
  certs:
  vhost.d:
  html:

networks:
  net:
    driver: bridge
// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostAuthValidateTokenHandlerFunc turns a function with the right signature into a post auth validate token handler
type PostAuthValidateTokenHandlerFunc func(PostAuthValidateTokenParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAuthValidateTokenHandlerFunc) Handle(params PostAuthValidateTokenParams) middleware.Responder {
	return fn(params)
}

// PostAuthValidateTokenHandler interface for that can handle valid post auth validate token params
type PostAuthValidateTokenHandler interface {
	Handle(PostAuthValidateTokenParams) middleware.Responder
}

// NewPostAuthValidateToken creates a new http.Handler for the post auth validate token operation
func NewPostAuthValidateToken(ctx *middleware.Context, handler PostAuthValidateTokenHandler) *PostAuthValidateToken {
	return &PostAuthValidateToken{Context: ctx, Handler: handler}
}

/*
	PostAuthValidateToken swagger:route POST /auth/validate-token postAuthValidateToken

Validate token
*/
type PostAuthValidateToken struct {
	Context *middleware.Context
	Handler PostAuthValidateTokenHandler
}

func (o *PostAuthValidateToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAuthValidateTokenParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostAuthValidateTokenBody post auth validate token body
//
// swagger:model PostAuthValidateTokenBody
type PostAuthValidateTokenBody struct {

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this post auth validate token body
func (o *PostAuthValidateTokenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post auth validate token body based on context it is used
func (o *PostAuthValidateTokenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAuthValidateTokenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAuthValidateTokenBody) UnmarshalBinary(b []byte) error {
	var res PostAuthValidateTokenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostAuthValidateTokenOKBody post auth validate token o k body
//
// swagger:model PostAuthValidateTokenOKBody
type PostAuthValidateTokenOKBody struct {

	// is valid
	IsValid bool `json:"is-valid,omitempty"`
}

// Validate validates this post auth validate token o k body
func (o *PostAuthValidateTokenOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post auth validate token o k body based on context it is used
func (o *PostAuthValidateTokenOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAuthValidateTokenOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAuthValidateTokenOKBody) UnmarshalBinary(b []byte) error {
	var res PostAuthValidateTokenOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

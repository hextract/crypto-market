// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/h4x4d/crypto-market/auth/internal/models"
)

// PostAuthRegisterOKCode is the HTTP code returned for type PostAuthRegisterOK
const PostAuthRegisterOKCode int = 200

/*
PostAuthRegisterOK Success operation

swagger:response postAuthRegisterOK
*/
type PostAuthRegisterOK struct {

	/*
	  In: Body
	*/
	Payload *PostAuthRegisterOKBody `json:"body,omitempty"`
}

// NewPostAuthRegisterOK creates PostAuthRegisterOK with default headers values
func NewPostAuthRegisterOK() *PostAuthRegisterOK {

	return &PostAuthRegisterOK{}
}

// WithPayload adds the payload to the post auth register o k response
func (o *PostAuthRegisterOK) WithPayload(payload *PostAuthRegisterOKBody) *PostAuthRegisterOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post auth register o k response
func (o *PostAuthRegisterOK) SetPayload(payload *PostAuthRegisterOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAuthRegisterOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostAuthRegisterConflictCode is the HTTP code returned for type PostAuthRegisterConflict
const PostAuthRegisterConflictCode int = 409

/*
PostAuthRegisterConflict Incorrect data

swagger:response postAuthRegisterConflict
*/
type PostAuthRegisterConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostAuthRegisterConflict creates PostAuthRegisterConflict with default headers values
func NewPostAuthRegisterConflict() *PostAuthRegisterConflict {

	return &PostAuthRegisterConflict{}
}

// WithPayload adds the payload to the post auth register conflict response
func (o *PostAuthRegisterConflict) WithPayload(payload *models.Error) *PostAuthRegisterConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post auth register conflict response
func (o *PostAuthRegisterConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAuthRegisterConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostAuthRegisterInternalServerErrorCode is the HTTP code returned for type PostAuthRegisterInternalServerError
const PostAuthRegisterInternalServerErrorCode int = 500

/*
PostAuthRegisterInternalServerError Server error

swagger:response postAuthRegisterInternalServerError
*/
type PostAuthRegisterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostAuthRegisterInternalServerError creates PostAuthRegisterInternalServerError with default headers values
func NewPostAuthRegisterInternalServerError() *PostAuthRegisterInternalServerError {

	return &PostAuthRegisterInternalServerError{}
}

// WithPayload adds the payload to the post auth register internal server error response
func (o *PostAuthRegisterInternalServerError) WithPayload(payload *models.Error) *PostAuthRegisterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post auth register internal server error response
func (o *PostAuthRegisterInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAuthRegisterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

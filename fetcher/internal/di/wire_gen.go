// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"fetcher/internal/application/use_cases"
	"fetcher/internal/di/providers"
	"fetcher/internal/infrastructure/adapters/queues/kafka"
	"fetcher/internal/infrastructure/adapters/repositories"
	"fetcher/internal/infrastructure/services"
	"fetcher/internal/presentation/web/controllers"
)

// Injectors from wire.go:

func InitializeServiceLocator() (*ServiceLocator, error) {
	v, err := providers.KafkaBrokersProvider()
	if err != nil {
		return nil, err
	}
	consumer, err := kafka.NewConsumer(v)
	if err != nil {
		return nil, err
	}
	producer, err := kafka.NewProducer(v)
	if err != nil {
		return nil, err
	}
	orderBookRepository, err := repositories.NewOrderBookRepository(consumer, producer)
	if err != nil {
		return nil, err
	}
	binancePoller, err := services.NewBinancePoller(orderBookRepository)
	if err != nil {
		return nil, err
	}
	getOrderBookDataUseCase, err := use_cases.NewGetOrderBookDataUseCase(orderBookRepository)
	if err != nil {
		return nil, err
	}
	marketDataController, err := controllers.NewMarketDataController(getOrderBookDataUseCase)
	if err != nil {
		return nil, err
	}
	accountBalanceRepository := repositories.NewAccountBalanceRepository()
	getAccountBalanceUseCase, err := use_cases.NewGetAccountBalanceUseCase(accountBalanceRepository)
	if err != nil {
		return nil, err
	}
	accountBalanceController, err := controllers.NewAccountBalanceController(getAccountBalanceUseCase)
	if err != nil {
		return nil, err
	}
	serviceLocator, err := newServiceLocator(orderBookRepository, binancePoller, marketDataController, accountBalanceController)
	if err != nil {
		return nil, err
	}
	return serviceLocator, nil
}

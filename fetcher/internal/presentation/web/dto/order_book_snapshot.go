// Code generated by go-swagger; DO NOT EDIT.

package dto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderBookSnapshot order book snapshot
//
// swagger:model OrderBookSnapshot
type OrderBookSnapshot struct {

	// ask volume
	// Required: true
	AskVolume *float64 `json:"ask_volume"`

	// bid volume
	// Required: true
	BidVolume *float64 `json:"bid_volume"`

	// depth
	// Required: true
	Depth *int32 `json:"depth"`

	// mid
	// Required: true
	Mid *float64 `json:"mid"`

	// spread
	// Required: true
	Spread *float64 `json:"spread"`
}

// Validate validates this order book snapshot
func (m *OrderBookSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAskVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBidVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpread(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderBookSnapshot) validateAskVolume(formats strfmt.Registry) error {

	if err := validate.Required("ask_volume", "body", m.AskVolume); err != nil {
		return err
	}

	return nil
}

func (m *OrderBookSnapshot) validateBidVolume(formats strfmt.Registry) error {

	if err := validate.Required("bid_volume", "body", m.BidVolume); err != nil {
		return err
	}

	return nil
}

func (m *OrderBookSnapshot) validateDepth(formats strfmt.Registry) error {

	if err := validate.Required("depth", "body", m.Depth); err != nil {
		return err
	}

	return nil
}

func (m *OrderBookSnapshot) validateMid(formats strfmt.Registry) error {

	if err := validate.Required("mid", "body", m.Mid); err != nil {
		return err
	}

	return nil
}

func (m *OrderBookSnapshot) validateSpread(formats strfmt.Registry) error {

	if err := validate.Required("spread", "body", m.Spread); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this order book snapshot based on context it is used
func (m *OrderBookSnapshot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrderBookSnapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderBookSnapshot) UnmarshalBinary(b []byte) error {
	var res OrderBookSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

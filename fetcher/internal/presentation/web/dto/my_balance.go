// Code generated by go-swagger; DO NOT EDIT.

package dto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MyBalance my balance
//
// swagger:model MyBalance
type MyBalance struct {

	// btc free
	// Required: true
	BtcFree *float64 `json:"btc_free"`

	// btc locked
	// Required: true
	BtcLocked *float64 `json:"btc_locked"`

	// eth free
	// Required: true
	EthFree *float64 `json:"eth_free"`

	// eth locked
	// Required: true
	EthLocked *float64 `json:"eth_locked"`

	// usdt free
	// Required: true
	UsdtFree *float64 `json:"usdt_free"`

	// usdt locked
	// Required: true
	UsdtLocked *float64 `json:"usdt_locked"`
}

// Validate validates this my balance
func (m *MyBalance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBtcFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBtcLocked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEthFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEthLocked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsdtFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsdtLocked(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MyBalance) validateBtcFree(formats strfmt.Registry) error {

	if err := validate.Required("btc_free", "body", m.BtcFree); err != nil {
		return err
	}

	return nil
}

func (m *MyBalance) validateBtcLocked(formats strfmt.Registry) error {

	if err := validate.Required("btc_locked", "body", m.BtcLocked); err != nil {
		return err
	}

	return nil
}

func (m *MyBalance) validateEthFree(formats strfmt.Registry) error {

	if err := validate.Required("eth_free", "body", m.EthFree); err != nil {
		return err
	}

	return nil
}

func (m *MyBalance) validateEthLocked(formats strfmt.Registry) error {

	if err := validate.Required("eth_locked", "body", m.EthLocked); err != nil {
		return err
	}

	return nil
}

func (m *MyBalance) validateUsdtFree(formats strfmt.Registry) error {

	if err := validate.Required("usdt_free", "body", m.UsdtFree); err != nil {
		return err
	}

	return nil
}

func (m *MyBalance) validateUsdtLocked(formats strfmt.Registry) error {

	if err := validate.Required("usdt_locked", "body", m.UsdtLocked); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this my balance based on context it is used
func (m *MyBalance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MyBalance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MyBalance) UnmarshalBinary(b []byte) error {
	var res MyBalance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

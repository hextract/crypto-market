// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Continuous market API for cryptocurrency trading and account management",
    "title": "market.main",
    "version": "0.1.0"
  },
  "paths": {
    "/account/balance": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns balance of all cryptocurrencies for the authenticated user",
        "produces": [
          "application/json"
        ],
        "summary": "Get user's balance",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "currency",
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "type": "number",
                    "format": "float",
                    "example": 100.5
                  },
                  "currency": {
                    "type": "string",
                    "enum": [
                      "USDT",
                      "BTC"
                    ],
                    "example": "USDT"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/bid": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create bid",
        "operationId": "create_bid",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "from_currency",
                "to_currency",
                "min_price",
                "max_price",
                "amount_to_buy"
              ],
              "properties": {
                "amount_to_buy": {
                  "type": "number",
                  "format": "float"
                },
                "buy_speed": {
                  "type": "number",
                  "format": "float"
                },
                "from_currency": {
                  "type": "string",
                  "enum": [
                    "USDT",
                    "BTC"
                  ]
                },
                "max_price": {
                  "type": "number",
                  "format": "float"
                },
                "min_price": {
                  "type": "number",
                  "format": "float"
                },
                "to_currency": {
                  "type": "string",
                  "enum": [
                    "USDT",
                    "BTC"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "bid_123"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/market-maker/{order_id}/status": {
      "patch": {
        "security": [
          {
            "market_maker_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update order status",
        "operationId": "update_order_status",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "bought_amount": {
                  "type": "number",
                  "format": "float"
                },
                "price": {
                  "type": "number",
                  "format": "float"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "finished",
                    "cancelled"
                  ]
                }
              }
            }
          },
          {
            "type": "string",
            "description": "ID of bid to update",
            "name": "order_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "bid_123"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/market/{bid_id}": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get bid info by id",
        "operationId": "get_bid_by_id",
        "parameters": [
          {
            "type": "string",
            "description": "ID of bid to return",
            "name": "bid_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/bid"
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Bid not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Cancel bid",
        "operationId": "cancel_bid",
        "parameters": [
          {
            "type": "string",
            "description": "ID of bid to cancel",
            "name": "bid_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "cancelled"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "security": [
          {
            "metrics_key": []
          }
        ],
        "description": "Returns Prometheus-compatible metrics for the service",
        "produces": [
          "text/plain; version=0.0.4"
        ],
        "summary": "Prometheus metrics",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions/deposit": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Creates a request to deposit cryptocurrency to the user's account and generates a deposit address",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Deposit request",
        "operationId": "post_transactions_deposit",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deposit_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/deposit_response"
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions/purchase": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns the user's purchase history with optional filters",
        "produces": [
          "application/json"
        ],
        "summary": "Get purchase history",
        "parameters": [
          {
            "enum": [
              "finished",
              "processing",
              "cancelled",
              "pending"
            ],
            "type": "string",
            "description": "Filter by purchase status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Filter purchases from this Unix timestamp",
            "name": "date_from",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Filter purchases up to this Unix timestamp",
            "name": "date_to",
            "in": "query"
          },
          {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "Maximum number of results",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "Number of results to skip",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/purchase"
              }
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions/transfers": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns the user's withdrawal and deposit history with optional filters",
        "produces": [
          "application/json"
        ],
        "summary": "Get withdrawal and deposit history",
        "parameters": [
          {
            "type": "number",
            "format": "float",
            "description": "Minimum transaction amount",
            "name": "min_amount",
            "in": "query"
          },
          {
            "type": "number",
            "format": "float",
            "description": "Maximum transaction amount",
            "name": "max_amount",
            "in": "query"
          },
          {
            "enum": [
              "finished",
              "processing",
              "cancelled",
              "pending"
            ],
            "type": "string",
            "description": "Filter by transaction status",
            "name": "status",
            "in": "query"
          },
          {
            "enum": [
              "USDT",
              "BTC"
            ],
            "type": "string",
            "description": "Filter by currency",
            "name": "currency",
            "in": "query"
          },
          {
            "enum": [
              "deposit",
              "withdraw"
            ],
            "type": "string",
            "description": "Filter by operation type",
            "name": "operation",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Filter transactions from this Unix timestamp",
            "name": "date_from",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Filter transactions up to this Unix timestamp",
            "name": "date_to",
            "in": "query"
          },
          {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "Maximum number of results",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "Number of results to skip",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/transfer"
              }
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions/withdraw": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Creates a request to withdraw cryptocurrency from the user's account",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Withdrawal request",
        "operationId": "post_transactions_withdraw",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/withdraw_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/withdraw_response"
            }
          },
          "400": {
            "description": "Incorrect data or insufficient balance",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "error_message",
        "error_status_code"
      ],
      "properties": {
        "error_code": {
          "type": "string",
          "example": "INVALID_INPUT"
        },
        "error_message": {
          "type": "string",
          "example": "Invalid input data"
        },
        "error_status_code": {
          "type": "integer",
          "example": 400
        }
      }
    },
    "bid": {
      "type": "object",
      "required": [
        "id",
        "from_currency",
        "to_currency",
        "min_price",
        "max_price",
        "amount_to_buy",
        "status",
        "create_date"
      ],
      "properties": {
        "amount_to_buy": {
          "type": "number",
          "format": "float"
        },
        "avg_price": {
          "type": "number",
          "format": "float"
        },
        "bought_amount": {
          "type": "number",
          "format": "float"
        },
        "buy_speed": {
          "type": "number",
          "format": "float"
        },
        "complete_date": {
          "type": "string",
          "format": "date-time"
        },
        "create_date": {
          "type": "string",
          "format": "date-time"
        },
        "from_currency": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ]
        },
        "id": {
          "type": "string",
          "example": "bid_123"
        },
        "max_price": {
          "type": "number",
          "format": "float"
        },
        "min_price": {
          "type": "number",
          "format": "float"
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "processing",
            "finished",
            "cancelled"
          ]
        },
        "to_currency": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ]
        }
      }
    },
    "deposit_request": {
      "type": "object",
      "required": [
        "currency"
      ],
      "properties": {
        "currency": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ],
          "example": "USDT"
        }
      }
    },
    "deposit_response": {
      "type": "object",
      "required": [
        "id",
        "status",
        "address"
      ],
      "properties": {
        "address": {
          "type": "string",
          "example": "0xabcdef1234567890abcdef1234567890abcdef12"
        },
        "id": {
          "type": "string",
          "example": "tx_dep_some-uuid"
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "finished",
            "cancelled"
          ],
          "example": "pending"
        }
      }
    },
    "purchase": {
      "type": "object",
      "required": [
        "id",
        "currency_from",
        "currency_to",
        "amount_from",
        "amount_to",
        "status",
        "date"
      ],
      "properties": {
        "amount_from": {
          "type": "number",
          "format": "float",
          "example": 100.5
        },
        "amount_to": {
          "type": "number",
          "format": "float",
          "example": 0.005
        },
        "currency_from": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ],
          "example": "USDT"
        },
        "currency_to": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ],
          "example": "BTC"
        },
        "date": {
          "type": "integer",
          "format": "int64",
          "example": 1747036800
        },
        "id": {
          "type": "string",
          "example": "bid_123"
        },
        "status": {
          "type": "string",
          "enum": [
            "finished",
            "processing",
            "cancelled",
            "pending"
          ],
          "example": "finished"
        }
      }
    },
    "transfer": {
      "type": "object",
      "required": [
        "id",
        "currency",
        "amount",
        "operation",
        "status",
        "date"
      ],
      "properties": {
        "address": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef12345678"
        },
        "amount": {
          "type": "number",
          "format": "float",
          "example": 100.5
        },
        "commission": {
          "type": "number",
          "format": "float",
          "example": 0.1
        },
        "currency": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ],
          "example": "USDT"
        },
        "date": {
          "type": "integer",
          "format": "int64",
          "example": 1747036800
        },
        "id": {
          "type": "string",
          "example": "tx_dep_123456"
        },
        "operation": {
          "type": "string",
          "enum": [
            "deposit",
            "withdraw"
          ],
          "example": "deposit"
        },
        "status": {
          "type": "string",
          "enum": [
            "finished",
            "processing",
            "cancelled",
            "pending"
          ],
          "example": "finished"
        }
      }
    },
    "withdraw_request": {
      "type": "object",
      "required": [
        "currency",
        "amount",
        "address"
      ],
      "properties": {
        "address": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef12345678"
        },
        "amount": {
          "type": "number",
          "format": "float",
          "example": 100.5
        },
        "currency": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ],
          "example": "USDT"
        }
      }
    },
    "withdraw_response": {
      "type": "object",
      "required": [
        "id",
        "status"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "tx_with_some-uuid"
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "finished",
            "cancelled"
          ],
          "example": "pending"
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "market_maker_key": {
      "type": "apiKey",
      "name": "market_maker",
      "in": "header"
    },
    "metrics_key": {
      "type": "apiKey",
      "name": "metrics_key",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Continuous market API for cryptocurrency trading and account management",
    "title": "market.main",
    "version": "0.1.0"
  },
  "paths": {
    "/account/balance": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns balance of all cryptocurrencies for the authenticated user",
        "produces": [
          "application/json"
        ],
        "summary": "Get user's balance",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetAccountBalanceOKBodyItems0"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/bid": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create bid",
        "operationId": "create_bid",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "from_currency",
                "to_currency",
                "min_price",
                "max_price",
                "amount_to_buy"
              ],
              "properties": {
                "amount_to_buy": {
                  "type": "number",
                  "format": "float",
                  "minimum": 0
                },
                "buy_speed": {
                  "type": "number",
                  "format": "float",
                  "minimum": 0
                },
                "from_currency": {
                  "type": "string",
                  "enum": [
                    "USDT",
                    "BTC"
                  ]
                },
                "max_price": {
                  "type": "number",
                  "format": "float",
                  "minimum": 0
                },
                "min_price": {
                  "type": "number",
                  "format": "float",
                  "minimum": 0
                },
                "to_currency": {
                  "type": "string",
                  "enum": [
                    "USDT",
                    "BTC"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "bid_123"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/market-maker/{order_id}/status": {
      "patch": {
        "security": [
          {
            "market_maker_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update order status",
        "operationId": "update_order_status",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "bought_amount": {
                  "type": "number",
                  "format": "float",
                  "minimum": 0
                },
                "price": {
                  "type": "number",
                  "format": "float",
                  "minimum": 0
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "finished",
                    "cancelled"
                  ]
                }
              }
            }
          },
          {
            "type": "string",
            "description": "ID of bid to update",
            "name": "order_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "bid_123"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/market/{bid_id}": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get bid info by id",
        "operationId": "get_bid_by_id",
        "parameters": [
          {
            "type": "string",
            "description": "ID of bid to return",
            "name": "bid_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/bid"
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Bid not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Cancel bid",
        "operationId": "cancel_bid",
        "parameters": [
          {
            "type": "string",
            "description": "ID of bid to cancel",
            "name": "bid_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "cancelled"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "security": [
          {
            "metrics_key": []
          }
        ],
        "description": "Returns Prometheus-compatible metrics for the service",
        "produces": [
          "text/plain; version=0.0.4"
        ],
        "summary": "Prometheus metrics",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions/deposit": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Creates a request to deposit cryptocurrency to the user's account and generates a deposit address",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Deposit request",
        "operationId": "post_transactions_deposit",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deposit_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/deposit_response"
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions/purchase": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns the user's purchase history with optional filters",
        "produces": [
          "application/json"
        ],
        "summary": "Get purchase history",
        "parameters": [
          {
            "enum": [
              "finished",
              "processing",
              "cancelled",
              "pending"
            ],
            "type": "string",
            "description": "Filter by purchase status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Filter purchases from this Unix timestamp",
            "name": "date_from",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Filter purchases up to this Unix timestamp",
            "name": "date_to",
            "in": "query"
          },
          {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "Maximum number of results",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "Number of results to skip",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/purchase"
              }
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions/transfers": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns the user's withdrawal and deposit history with optional filters",
        "produces": [
          "application/json"
        ],
        "summary": "Get withdrawal and deposit history",
        "parameters": [
          {
            "minimum": 0,
            "type": "number",
            "format": "float",
            "description": "Minimum transaction amount",
            "name": "min_amount",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "number",
            "format": "float",
            "description": "Maximum transaction amount",
            "name": "max_amount",
            "in": "query"
          },
          {
            "enum": [
              "finished",
              "processing",
              "cancelled",
              "pending"
            ],
            "type": "string",
            "description": "Filter by transaction status",
            "name": "status",
            "in": "query"
          },
          {
            "enum": [
              "USDT",
              "BTC"
            ],
            "type": "string",
            "description": "Filter by currency",
            "name": "currency",
            "in": "query"
          },
          {
            "enum": [
              "deposit",
              "withdraw"
            ],
            "type": "string",
            "description": "Filter by operation type",
            "name": "operation",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Filter transactions from this Unix timestamp",
            "name": "date_from",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Filter transactions up to this Unix timestamp",
            "name": "date_to",
            "in": "query"
          },
          {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "Maximum number of results",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "Number of results to skip",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/transfer"
              }
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions/withdraw": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Creates a request to withdraw cryptocurrency from the user's account",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Withdrawal request",
        "operationId": "post_transactions_withdraw",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/withdraw_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/withdraw_response"
            }
          },
          "400": {
            "description": "Incorrect data or insufficient balance",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "error_message",
        "error_status_code"
      ],
      "properties": {
        "error_code": {
          "type": "string",
          "example": "INVALID_INPUT"
        },
        "error_message": {
          "type": "string",
          "example": "Invalid input data"
        },
        "error_status_code": {
          "type": "integer",
          "example": 400
        }
      }
    },
    "GetAccountBalanceOKBodyItems0": {
      "type": "object",
      "required": [
        "currency",
        "amount"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "example": 100.5
        },
        "currency": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ],
          "example": "USDT"
        }
      }
    },
    "bid": {
      "type": "object",
      "required": [
        "id",
        "from_currency",
        "to_currency",
        "min_price",
        "max_price",
        "amount_to_buy",
        "status",
        "create_date"
      ],
      "properties": {
        "amount_to_buy": {
          "type": "number",
          "format": "float",
          "minimum": 0
        },
        "avg_price": {
          "type": "number",
          "format": "float",
          "minimum": 0
        },
        "bought_amount": {
          "type": "number",
          "format": "float",
          "minimum": 0
        },
        "buy_speed": {
          "type": "number",
          "format": "float",
          "minimum": 0
        },
        "complete_date": {
          "type": "string",
          "format": "date-time"
        },
        "create_date": {
          "type": "string",
          "format": "date-time"
        },
        "from_currency": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ]
        },
        "id": {
          "type": "string",
          "example": "bid_123"
        },
        "max_price": {
          "type": "number",
          "format": "float",
          "minimum": 0
        },
        "min_price": {
          "type": "number",
          "format": "float",
          "minimum": 0
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "processing",
            "finished",
            "cancelled"
          ]
        },
        "to_currency": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ]
        }
      }
    },
    "deposit_request": {
      "type": "object",
      "required": [
        "currency"
      ],
      "properties": {
        "currency": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ],
          "example": "USDT"
        }
      }
    },
    "deposit_response": {
      "type": "object",
      "required": [
        "id",
        "status",
        "address"
      ],
      "properties": {
        "address": {
          "type": "string",
          "example": "0xabcdef1234567890abcdef1234567890abcdef12"
        },
        "id": {
          "type": "string",
          "example": "tx_dep_some-uuid"
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "finished",
            "cancelled"
          ],
          "example": "pending"
        }
      }
    },
    "purchase": {
      "type": "object",
      "required": [
        "id",
        "currency_from",
        "currency_to",
        "amount_from",
        "amount_to",
        "status",
        "date"
      ],
      "properties": {
        "amount_from": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "example": 100.5
        },
        "amount_to": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "example": 0.005
        },
        "currency_from": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ],
          "example": "USDT"
        },
        "currency_to": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ],
          "example": "BTC"
        },
        "date": {
          "type": "integer",
          "format": "int64",
          "example": 1747036800
        },
        "id": {
          "type": "string",
          "example": "bid_123"
        },
        "status": {
          "type": "string",
          "enum": [
            "finished",
            "processing",
            "cancelled",
            "pending"
          ],
          "example": "finished"
        }
      }
    },
    "transfer": {
      "type": "object",
      "required": [
        "id",
        "currency",
        "amount",
        "operation",
        "status",
        "date"
      ],
      "properties": {
        "address": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef12345678"
        },
        "amount": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "example": 100.5
        },
        "commission": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "example": 0.1
        },
        "currency": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ],
          "example": "USDT"
        },
        "date": {
          "type": "integer",
          "format": "int64",
          "example": 1747036800
        },
        "id": {
          "type": "string",
          "example": "tx_dep_123456"
        },
        "operation": {
          "type": "string",
          "enum": [
            "deposit",
            "withdraw"
          ],
          "example": "deposit"
        },
        "status": {
          "type": "string",
          "enum": [
            "finished",
            "processing",
            "cancelled",
            "pending"
          ],
          "example": "finished"
        }
      }
    },
    "withdraw_request": {
      "type": "object",
      "required": [
        "currency",
        "amount",
        "address"
      ],
      "properties": {
        "address": {
          "type": "string",
          "example": "0x1234567890abcdef1234567890abcdef12345678"
        },
        "amount": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "example": 100.5
        },
        "currency": {
          "type": "string",
          "enum": [
            "USDT",
            "BTC"
          ],
          "example": "USDT"
        }
      }
    },
    "withdraw_response": {
      "type": "object",
      "required": [
        "id",
        "status"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "tx_with_some-uuid"
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "finished",
            "cancelled"
          ],
          "example": "pending"
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "market_maker_key": {
      "type": "apiKey",
      "name": "market_maker",
      "in": "header"
    },
    "metrics_key": {
      "type": "apiKey",
      "name": "metrics_key",
      "in": "header"
    }
  }
}`))
}

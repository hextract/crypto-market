// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "continuous market",
    "title": "market.main",
    "version": "0.1.0"
  },
  "paths": {
    "/account/balance": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns balance of all cryptocurrencies",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get user's balance",
        "responses": {
          "200": {
            "description": "Success operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string"
                  },
                  "currency": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/bid": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get my bids",
        "operationId": "get_bids",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bid"
              }
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create bid",
        "operationId": "create_bid",
        "parameters": [
          {
            "name": "object",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/bid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "bid_id": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/market/{bid_id}": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get bid info by id",
        "operationId": "get_bid_by_id",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of bid to return",
            "name": "bid_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bid"
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Bid not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Cancel bid",
        "operationId": "cancel_bid",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of bid to cancel",
            "name": "bid_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Prometheus metrics",
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/transactions/purchase": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns all user's purchase",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get purchase history",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "date_from": {
                  "type": "string"
                },
                "date_to": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "finished",
                    "processing",
                    "cancelled"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "amount_from": {
                    "type": "string"
                  },
                  "amount_to": {
                    "type": "string"
                  },
                  "currency_from": {
                    "type": "string"
                  },
                  "currency_to": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "finished",
                      "processing",
                      "cancelled"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions/transfers": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns all user's withdrawal and deposits",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get withdrawal and deposits history",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "currency": {
                  "type": "string"
                },
                "date_from": {
                  "type": "string"
                },
                "date_to": {
                  "type": "string"
                },
                "max_amount": {
                  "type": "string"
                },
                "min_amount": {
                  "type": "string"
                },
                "operation": {
                  "type": "string",
                  "enum": [
                    "deposit",
                    "withdrawal"
                  ]
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "finished",
                    "processing",
                    "cancelled"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string"
                  },
                  "commission": {
                    "type": "string"
                  },
                  "currency": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "deposit",
                      "withdrawal"
                    ]
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "finished",
                      "processing",
                      "cancelled"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions/withdraw": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Creates a request to withdraw cryptocurrency from the user's account.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Withdrawal request",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                },
                "currency": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "finished",
                    "processing",
                    "pending"
                  ]
                },
                "txHash": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "error_message": {
          "type": "string"
        },
        "error_status_code": {
          "type": "integer"
        }
      }
    },
    "Result": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "bid": {
      "type": "object",
      "properties": {
        "amount_to_buy": {
          "type": "number",
          "multipleOf": 1e-7
        },
        "bid_id": {
          "type": "integer",
          "format": "int64"
        },
        "bought_amount": {
          "type": "number",
          "multipleOf": 1e-7
        },
        "buy_speed": {
          "type": "number",
          "multipleOf": 1e-7
        },
        "max_price": {
          "type": "number",
          "multipleOf": 1e-7
        },
        "min_price": {
          "type": "number",
          "multipleOf": 1e-7
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "continuous market",
    "title": "market.main",
    "version": "0.1.0"
  },
  "paths": {
    "/account/balance": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns balance of all cryptocurrencies",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get user's balance",
        "responses": {
          "200": {
            "description": "Success operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetAccountBalanceOKBodyItems0"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/bid": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get my bids",
        "operationId": "get_bids",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bid"
              }
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create bid",
        "operationId": "create_bid",
        "parameters": [
          {
            "name": "object",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/bid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "bid_id": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/market/{bid_id}": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get bid info by id",
        "operationId": "get_bid_by_id",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of bid to return",
            "name": "bid_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bid"
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Bid not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Cancel bid",
        "operationId": "cancel_bid",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of bid to cancel",
            "name": "bid_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "400": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "No access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Prometheus metrics",
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/transactions/purchase": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns all user's purchase",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get purchase history",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "date_from": {
                  "type": "string"
                },
                "date_to": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "finished",
                    "processing",
                    "cancelled"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetTransactionsPurchaseOKBodyItems0"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions/transfers": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns all user's withdrawal and deposits",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get withdrawal and deposits history",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "currency": {
                  "type": "string"
                },
                "date_from": {
                  "type": "string"
                },
                "date_to": {
                  "type": "string"
                },
                "max_amount": {
                  "type": "string"
                },
                "min_amount": {
                  "type": "string"
                },
                "operation": {
                  "type": "string",
                  "enum": [
                    "deposit",
                    "withdrawal"
                  ]
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "finished",
                    "processing",
                    "cancelled"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetTransactionsTransfersOKBodyItems0"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions/withdraw": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Creates a request to withdraw cryptocurrency from the user's account.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Withdrawal request",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                },
                "currency": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "finished",
                    "processing",
                    "pending"
                  ]
                },
                "txHash": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Incorrect data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "error_message": {
          "type": "string"
        },
        "error_status_code": {
          "type": "integer"
        }
      }
    },
    "GetAccountBalanceOKBodyItems0": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "GetTransactionsPurchaseOKBodyItems0": {
      "type": "object",
      "properties": {
        "amount_from": {
          "type": "string"
        },
        "amount_to": {
          "type": "string"
        },
        "currency_from": {
          "type": "string"
        },
        "currency_to": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "finished",
            "processing",
            "cancelled"
          ]
        }
      }
    },
    "GetTransactionsTransfersOKBodyItems0": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string"
        },
        "commission": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "operation": {
          "type": "string",
          "enum": [
            "deposit",
            "withdrawal"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "finished",
            "processing",
            "cancelled"
          ]
        }
      }
    },
    "Result": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "bid": {
      "type": "object",
      "properties": {
        "amount_to_buy": {
          "type": "number",
          "multipleOf": 1e-7
        },
        "bid_id": {
          "type": "integer",
          "format": "int64"
        },
        "bought_amount": {
          "type": "number",
          "multipleOf": 1e-7
        },
        "buy_speed": {
          "type": "number",
          "multipleOf": 1e-7
        },
        "max_price": {
          "type": "number",
          "multipleOf": 1e-7
        },
        "min_price": {
          "type": "number",
          "multipleOf": 1e-7
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  }
}`))
}

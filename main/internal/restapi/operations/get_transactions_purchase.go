// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetTransactionsPurchaseHandlerFunc turns a function with the right signature into a get transactions purchase handler
type GetTransactionsPurchaseHandlerFunc func(GetTransactionsPurchaseParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTransactionsPurchaseHandlerFunc) Handle(params GetTransactionsPurchaseParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetTransactionsPurchaseHandler interface for that can handle valid get transactions purchase params
type GetTransactionsPurchaseHandler interface {
	Handle(GetTransactionsPurchaseParams, interface{}) middleware.Responder
}

// NewGetTransactionsPurchase creates a new http.Handler for the get transactions purchase operation
func NewGetTransactionsPurchase(ctx *middleware.Context, handler GetTransactionsPurchaseHandler) *GetTransactionsPurchase {
	return &GetTransactionsPurchase{Context: ctx, Handler: handler}
}

/*
	GetTransactionsPurchase swagger:route GET /transactions/purchase getTransactionsPurchase

# Get purchase history

Returns the user's purchase history with optional filters
*/
type GetTransactionsPurchase struct {
	Context *middleware.Context
	Handler GetTransactionsPurchaseHandler
}

func (o *GetTransactionsPurchase) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTransactionsPurchaseParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTransactionsPurchaseOKBodyItems0 get transactions purchase o k body items0
//
// swagger:model GetTransactionsPurchaseOKBodyItems0
type GetTransactionsPurchaseOKBodyItems0 struct {

	// amount from
	// Example: 100.5
	// Required: true
	// Minimum: 0
	AmountFrom *float32 `json:"amount_from"`

	// amount to
	// Example: 0.005
	// Required: true
	// Minimum: 0
	AmountTo *float32 `json:"amount_to"`

	// currency from
	// Example: USDT
	// Required: true
	// Enum: ["USDT","BTC"]
	CurrencyFrom *string `json:"currency_from"`

	// currency to
	// Example: BTC
	// Required: true
	// Enum: ["USDT","BTC"]
	CurrencyTo *string `json:"currency_to"`

	// date
	// Example: 2025-04-13T10:00:00Z
	// Required: true
	// Format: date-time
	Date *strfmt.DateTime `json:"date"`

	// id
	// Example: pur_123456
	// Required: true
	ID *string `json:"id"`

	// status
	// Example: finished
	// Required: true
	// Enum: ["finished","processing","cancelled"]
	Status *string `json:"status"`
}

// Validate validates this get transactions purchase o k body items0
func (o *GetTransactionsPurchaseOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAmountTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrencyFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrencyTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionsPurchaseOKBodyItems0) validateAmountFrom(formats strfmt.Registry) error {

	if err := validate.Required("amount_from", "body", o.AmountFrom); err != nil {
		return err
	}

	if err := validate.Minimum("amount_from", "body", float64(*o.AmountFrom), 0, false); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionsPurchaseOKBodyItems0) validateAmountTo(formats strfmt.Registry) error {

	if err := validate.Required("amount_to", "body", o.AmountTo); err != nil {
		return err
	}

	if err := validate.Minimum("amount_to", "body", float64(*o.AmountTo), 0, false); err != nil {
		return err
	}

	return nil
}

var getTransactionsPurchaseOKBodyItems0TypeCurrencyFromPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USDT","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getTransactionsPurchaseOKBodyItems0TypeCurrencyFromPropEnum = append(getTransactionsPurchaseOKBodyItems0TypeCurrencyFromPropEnum, v)
	}
}

const (

	// GetTransactionsPurchaseOKBodyItems0CurrencyFromUSDT captures enum value "USDT"
	GetTransactionsPurchaseOKBodyItems0CurrencyFromUSDT string = "USDT"

	// GetTransactionsPurchaseOKBodyItems0CurrencyFromBTC captures enum value "BTC"
	GetTransactionsPurchaseOKBodyItems0CurrencyFromBTC string = "BTC"
)

// prop value enum
func (o *GetTransactionsPurchaseOKBodyItems0) validateCurrencyFromEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getTransactionsPurchaseOKBodyItems0TypeCurrencyFromPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetTransactionsPurchaseOKBodyItems0) validateCurrencyFrom(formats strfmt.Registry) error {

	if err := validate.Required("currency_from", "body", o.CurrencyFrom); err != nil {
		return err
	}

	// value enum
	if err := o.validateCurrencyFromEnum("currency_from", "body", *o.CurrencyFrom); err != nil {
		return err
	}

	return nil
}

var getTransactionsPurchaseOKBodyItems0TypeCurrencyToPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USDT","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getTransactionsPurchaseOKBodyItems0TypeCurrencyToPropEnum = append(getTransactionsPurchaseOKBodyItems0TypeCurrencyToPropEnum, v)
	}
}

const (

	// GetTransactionsPurchaseOKBodyItems0CurrencyToUSDT captures enum value "USDT"
	GetTransactionsPurchaseOKBodyItems0CurrencyToUSDT string = "USDT"

	// GetTransactionsPurchaseOKBodyItems0CurrencyToBTC captures enum value "BTC"
	GetTransactionsPurchaseOKBodyItems0CurrencyToBTC string = "BTC"
)

// prop value enum
func (o *GetTransactionsPurchaseOKBodyItems0) validateCurrencyToEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getTransactionsPurchaseOKBodyItems0TypeCurrencyToPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetTransactionsPurchaseOKBodyItems0) validateCurrencyTo(formats strfmt.Registry) error {

	if err := validate.Required("currency_to", "body", o.CurrencyTo); err != nil {
		return err
	}

	// value enum
	if err := o.validateCurrencyToEnum("currency_to", "body", *o.CurrencyTo); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionsPurchaseOKBodyItems0) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", o.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", o.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionsPurchaseOKBodyItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var getTransactionsPurchaseOKBodyItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["finished","processing","cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getTransactionsPurchaseOKBodyItems0TypeStatusPropEnum = append(getTransactionsPurchaseOKBodyItems0TypeStatusPropEnum, v)
	}
}

const (

	// GetTransactionsPurchaseOKBodyItems0StatusFinished captures enum value "finished"
	GetTransactionsPurchaseOKBodyItems0StatusFinished string = "finished"

	// GetTransactionsPurchaseOKBodyItems0StatusProcessing captures enum value "processing"
	GetTransactionsPurchaseOKBodyItems0StatusProcessing string = "processing"

	// GetTransactionsPurchaseOKBodyItems0StatusCancelled captures enum value "cancelled"
	GetTransactionsPurchaseOKBodyItems0StatusCancelled string = "cancelled"
)

// prop value enum
func (o *GetTransactionsPurchaseOKBodyItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getTransactionsPurchaseOKBodyItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetTransactionsPurchaseOKBodyItems0) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", o.Status); err != nil {
		return err
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get transactions purchase o k body items0 based on context it is used
func (o *GetTransactionsPurchaseOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionsPurchaseOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionsPurchaseOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetTransactionsPurchaseOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

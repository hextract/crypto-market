// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/h4x4d/crypto-market/stack_connector/internal/models"
)

// PostTransactionsWithdrawOKCode is the HTTP code returned for type PostTransactionsWithdrawOK
const PostTransactionsWithdrawOKCode int = 200

/*
PostTransactionsWithdrawOK Success operation

swagger:response postTransactionsWithdrawOK
*/
type PostTransactionsWithdrawOK struct {

	/*
	  In: Body
	*/
	Payload *PostTransactionsWithdrawOKBody `json:"body,omitempty"`
}

// NewPostTransactionsWithdrawOK creates PostTransactionsWithdrawOK with default headers values
func NewPostTransactionsWithdrawOK() *PostTransactionsWithdrawOK {

	return &PostTransactionsWithdrawOK{}
}

// WithPayload adds the payload to the post transactions withdraw o k response
func (o *PostTransactionsWithdrawOK) WithPayload(payload *PostTransactionsWithdrawOKBody) *PostTransactionsWithdrawOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post transactions withdraw o k response
func (o *PostTransactionsWithdrawOK) SetPayload(payload *PostTransactionsWithdrawOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTransactionsWithdrawOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostTransactionsWithdrawUnauthorizedCode is the HTTP code returned for type PostTransactionsWithdrawUnauthorized
const PostTransactionsWithdrawUnauthorizedCode int = 401

/*
PostTransactionsWithdrawUnauthorized Unauthorized

swagger:response postTransactionsWithdrawUnauthorized
*/
type PostTransactionsWithdrawUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostTransactionsWithdrawUnauthorized creates PostTransactionsWithdrawUnauthorized with default headers values
func NewPostTransactionsWithdrawUnauthorized() *PostTransactionsWithdrawUnauthorized {

	return &PostTransactionsWithdrawUnauthorized{}
}

// WithPayload adds the payload to the post transactions withdraw unauthorized response
func (o *PostTransactionsWithdrawUnauthorized) WithPayload(payload *models.Error) *PostTransactionsWithdrawUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post transactions withdraw unauthorized response
func (o *PostTransactionsWithdrawUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTransactionsWithdrawUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostTransactionsWithdrawConflictCode is the HTTP code returned for type PostTransactionsWithdrawConflict
const PostTransactionsWithdrawConflictCode int = 409

/*
PostTransactionsWithdrawConflict Incorrect data

swagger:response postTransactionsWithdrawConflict
*/
type PostTransactionsWithdrawConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostTransactionsWithdrawConflict creates PostTransactionsWithdrawConflict with default headers values
func NewPostTransactionsWithdrawConflict() *PostTransactionsWithdrawConflict {

	return &PostTransactionsWithdrawConflict{}
}

// WithPayload adds the payload to the post transactions withdraw conflict response
func (o *PostTransactionsWithdrawConflict) WithPayload(payload *models.Error) *PostTransactionsWithdrawConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post transactions withdraw conflict response
func (o *PostTransactionsWithdrawConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTransactionsWithdrawConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

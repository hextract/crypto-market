// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/h4x4d/crypto-market/main/internal/models"
)

// GetTransactionsTransfersOKCode is the HTTP code returned for type GetTransactionsTransfersOK
const GetTransactionsTransfersOKCode int = 200

/*
GetTransactionsTransfersOK Successful operation

swagger:response getTransactionsTransfersOK
*/
type GetTransactionsTransfersOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Transfer `json:"body,omitempty"`
}

// NewGetTransactionsTransfersOK creates GetTransactionsTransfersOK with default headers values
func NewGetTransactionsTransfersOK() *GetTransactionsTransfersOK {

	return &GetTransactionsTransfersOK{}
}

// WithPayload adds the payload to the get transactions transfers o k response
func (o *GetTransactionsTransfersOK) WithPayload(payload []*models.Transfer) *GetTransactionsTransfersOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get transactions transfers o k response
func (o *GetTransactionsTransfersOK) SetPayload(payload []*models.Transfer) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTransactionsTransfersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Transfer, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetTransactionsTransfersBadRequestCode is the HTTP code returned for type GetTransactionsTransfersBadRequest
const GetTransactionsTransfersBadRequestCode int = 400

/*
GetTransactionsTransfersBadRequest Incorrect data

swagger:response getTransactionsTransfersBadRequest
*/
type GetTransactionsTransfersBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTransactionsTransfersBadRequest creates GetTransactionsTransfersBadRequest with default headers values
func NewGetTransactionsTransfersBadRequest() *GetTransactionsTransfersBadRequest {

	return &GetTransactionsTransfersBadRequest{}
}

// WithPayload adds the payload to the get transactions transfers bad request response
func (o *GetTransactionsTransfersBadRequest) WithPayload(payload *models.Error) *GetTransactionsTransfersBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get transactions transfers bad request response
func (o *GetTransactionsTransfersBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTransactionsTransfersBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTransactionsTransfersUnauthorizedCode is the HTTP code returned for type GetTransactionsTransfersUnauthorized
const GetTransactionsTransfersUnauthorizedCode int = 401

/*
GetTransactionsTransfersUnauthorized Unauthorized

swagger:response getTransactionsTransfersUnauthorized
*/
type GetTransactionsTransfersUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTransactionsTransfersUnauthorized creates GetTransactionsTransfersUnauthorized with default headers values
func NewGetTransactionsTransfersUnauthorized() *GetTransactionsTransfersUnauthorized {

	return &GetTransactionsTransfersUnauthorized{}
}

// WithPayload adds the payload to the get transactions transfers unauthorized response
func (o *GetTransactionsTransfersUnauthorized) WithPayload(payload *models.Error) *GetTransactionsTransfersUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get transactions transfers unauthorized response
func (o *GetTransactionsTransfersUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTransactionsTransfersUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

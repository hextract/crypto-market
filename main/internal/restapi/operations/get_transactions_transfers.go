// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/h4x4d/crypto-market/main/internal/models"
)

// GetTransactionsTransfersHandlerFunc turns a function with the right signature into a get transactions transfers handler
type GetTransactionsTransfersHandlerFunc func(GetTransactionsTransfersParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTransactionsTransfersHandlerFunc) Handle(params GetTransactionsTransfersParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetTransactionsTransfersHandler interface for that can handle valid get transactions transfers params
type GetTransactionsTransfersHandler interface {
	Handle(GetTransactionsTransfersParams, *models.User) middleware.Responder
}

// NewGetTransactionsTransfers creates a new http.Handler for the get transactions transfers operation
func NewGetTransactionsTransfers(ctx *middleware.Context, handler GetTransactionsTransfersHandler) *GetTransactionsTransfers {
	return &GetTransactionsTransfers{Context: ctx, Handler: handler}
}

/*
	GetTransactionsTransfers swagger:route GET /transactions/transfers getTransactionsTransfers

# Get withdrawal and deposit history

Returns the user's withdrawal and deposit history with optional filters
*/
type GetTransactionsTransfers struct {
	Context *middleware.Context
	Handler GetTransactionsTransfersHandler
}

func (o *GetTransactionsTransfers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTransactionsTransfersParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTransactionsTransfersOKBodyItems0 get transactions transfers o k body items0
//
// swagger:model GetTransactionsTransfersOKBodyItems0
type GetTransactionsTransfersOKBodyItems0 struct {

	// address
	// Example: 0x1234567890abcdef1234567890abcdef12345678
	Address string `json:"address,omitempty"`

	// amount
	// Example: 100.5
	// Required: true
	// Minimum: 0
	Amount *float32 `json:"amount"`

	// commission
	// Example: 0.1
	// Minimum: 0
	Commission *float32 `json:"commission,omitempty"`

	// currency
	// Example: USDT
	// Required: true
	// Enum: ["USDT","BTC"]
	Currency *string `json:"currency"`

	// date
	// Example: 2025-04-13T10:00:00Z
	// Required: true
	// Format: date-time
	Date *strfmt.DateTime `json:"date"`

	// id
	// Example: tx_dep_123456
	// Required: true
	ID *string `json:"id"`

	// operation
	// Example: deposit
	// Required: true
	// Enum: ["deposit","withdrawal"]
	Operation *string `json:"operation"`

	// status
	// Example: finished
	// Required: true
	// Enum: ["finished","processing","cancelled","pending"]
	Status *string `json:"status"`
}

// Validate validates this get transactions transfers o k body items0
func (o *GetTransactionsTransfersOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCommission(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionsTransfersOKBodyItems0) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", o.Amount); err != nil {
		return err
	}

	if err := validate.Minimum("amount", "body", float64(*o.Amount), 0, false); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionsTransfersOKBodyItems0) validateCommission(formats strfmt.Registry) error {
	if swag.IsZero(o.Commission) { // not required
		return nil
	}

	if err := validate.Minimum("commission", "body", float64(*o.Commission), 0, false); err != nil {
		return err
	}

	return nil
}

var getTransactionsTransfersOKBodyItems0TypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USDT","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getTransactionsTransfersOKBodyItems0TypeCurrencyPropEnum = append(getTransactionsTransfersOKBodyItems0TypeCurrencyPropEnum, v)
	}
}

const (

	// GetTransactionsTransfersOKBodyItems0CurrencyUSDT captures enum value "USDT"
	GetTransactionsTransfersOKBodyItems0CurrencyUSDT string = "USDT"

	// GetTransactionsTransfersOKBodyItems0CurrencyBTC captures enum value "BTC"
	GetTransactionsTransfersOKBodyItems0CurrencyBTC string = "BTC"
)

// prop value enum
func (o *GetTransactionsTransfersOKBodyItems0) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getTransactionsTransfersOKBodyItems0TypeCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetTransactionsTransfersOKBodyItems0) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", o.Currency); err != nil {
		return err
	}

	// value enum
	if err := o.validateCurrencyEnum("currency", "body", *o.Currency); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionsTransfersOKBodyItems0) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", o.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", o.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionsTransfersOKBodyItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var getTransactionsTransfersOKBodyItems0TypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deposit","withdrawal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getTransactionsTransfersOKBodyItems0TypeOperationPropEnum = append(getTransactionsTransfersOKBodyItems0TypeOperationPropEnum, v)
	}
}

const (

	// GetTransactionsTransfersOKBodyItems0OperationDeposit captures enum value "deposit"
	GetTransactionsTransfersOKBodyItems0OperationDeposit string = "deposit"

	// GetTransactionsTransfersOKBodyItems0OperationWithdrawal captures enum value "withdrawal"
	GetTransactionsTransfersOKBodyItems0OperationWithdrawal string = "withdrawal"
)

// prop value enum
func (o *GetTransactionsTransfersOKBodyItems0) validateOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getTransactionsTransfersOKBodyItems0TypeOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetTransactionsTransfersOKBodyItems0) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", o.Operation); err != nil {
		return err
	}

	// value enum
	if err := o.validateOperationEnum("operation", "body", *o.Operation); err != nil {
		return err
	}

	return nil
}

var getTransactionsTransfersOKBodyItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["finished","processing","cancelled","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getTransactionsTransfersOKBodyItems0TypeStatusPropEnum = append(getTransactionsTransfersOKBodyItems0TypeStatusPropEnum, v)
	}
}

const (

	// GetTransactionsTransfersOKBodyItems0StatusFinished captures enum value "finished"
	GetTransactionsTransfersOKBodyItems0StatusFinished string = "finished"

	// GetTransactionsTransfersOKBodyItems0StatusProcessing captures enum value "processing"
	GetTransactionsTransfersOKBodyItems0StatusProcessing string = "processing"

	// GetTransactionsTransfersOKBodyItems0StatusCancelled captures enum value "cancelled"
	GetTransactionsTransfersOKBodyItems0StatusCancelled string = "cancelled"

	// GetTransactionsTransfersOKBodyItems0StatusPending captures enum value "pending"
	GetTransactionsTransfersOKBodyItems0StatusPending string = "pending"
)

// prop value enum
func (o *GetTransactionsTransfersOKBodyItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getTransactionsTransfersOKBodyItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetTransactionsTransfersOKBodyItems0) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", o.Status); err != nil {
		return err
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get transactions transfers o k body items0 based on context it is used
func (o *GetTransactionsTransfersOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionsTransfersOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionsTransfersOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetTransactionsTransfersOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

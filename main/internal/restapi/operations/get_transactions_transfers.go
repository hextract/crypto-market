// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetTransactionsTransfersHandlerFunc turns a function with the right signature into a get transactions transfers handler
type GetTransactionsTransfersHandlerFunc func(GetTransactionsTransfersParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTransactionsTransfersHandlerFunc) Handle(params GetTransactionsTransfersParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetTransactionsTransfersHandler interface for that can handle valid get transactions transfers params
type GetTransactionsTransfersHandler interface {
	Handle(GetTransactionsTransfersParams, interface{}) middleware.Responder
}

// NewGetTransactionsTransfers creates a new http.Handler for the get transactions transfers operation
func NewGetTransactionsTransfers(ctx *middleware.Context, handler GetTransactionsTransfersHandler) *GetTransactionsTransfers {
	return &GetTransactionsTransfers{Context: ctx, Handler: handler}
}

/*
	GetTransactionsTransfers swagger:route GET /transactions/transfers getTransactionsTransfers

# Get withdrawal and deposits history

Returns all user's withdrawal and deposits
*/
type GetTransactionsTransfers struct {
	Context *middleware.Context
	Handler GetTransactionsTransfersHandler
}

func (o *GetTransactionsTransfers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTransactionsTransfersParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTransactionsTransfersBody get transactions transfers body
//
// swagger:model GetTransactionsTransfersBody
type GetTransactionsTransfersBody struct {

	// currency
	Currency string `json:"currency,omitempty"`

	// date from
	DateFrom string `json:"date_from,omitempty"`

	// date to
	DateTo string `json:"date_to,omitempty"`

	// max amount
	MaxAmount string `json:"max_amount,omitempty"`

	// min amount
	MinAmount string `json:"min_amount,omitempty"`

	// operation
	// Enum: ["deposit","withdrawal"]
	Operation string `json:"operation,omitempty"`

	// status
	// Enum: ["finished","processing","cancelled"]
	Status string `json:"status,omitempty"`
}

// Validate validates this get transactions transfers body
func (o *GetTransactionsTransfersBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getTransactionsTransfersBodyTypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deposit","withdrawal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getTransactionsTransfersBodyTypeOperationPropEnum = append(getTransactionsTransfersBodyTypeOperationPropEnum, v)
	}
}

const (

	// GetTransactionsTransfersBodyOperationDeposit captures enum value "deposit"
	GetTransactionsTransfersBodyOperationDeposit string = "deposit"

	// GetTransactionsTransfersBodyOperationWithdrawal captures enum value "withdrawal"
	GetTransactionsTransfersBodyOperationWithdrawal string = "withdrawal"
)

// prop value enum
func (o *GetTransactionsTransfersBody) validateOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getTransactionsTransfersBodyTypeOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetTransactionsTransfersBody) validateOperation(formats strfmt.Registry) error {
	if swag.IsZero(o.Operation) { // not required
		return nil
	}

	// value enum
	if err := o.validateOperationEnum("body"+"."+"operation", "body", o.Operation); err != nil {
		return err
	}

	return nil
}

var getTransactionsTransfersBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["finished","processing","cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getTransactionsTransfersBodyTypeStatusPropEnum = append(getTransactionsTransfersBodyTypeStatusPropEnum, v)
	}
}

const (

	// GetTransactionsTransfersBodyStatusFinished captures enum value "finished"
	GetTransactionsTransfersBodyStatusFinished string = "finished"

	// GetTransactionsTransfersBodyStatusProcessing captures enum value "processing"
	GetTransactionsTransfersBodyStatusProcessing string = "processing"

	// GetTransactionsTransfersBodyStatusCancelled captures enum value "cancelled"
	GetTransactionsTransfersBodyStatusCancelled string = "cancelled"
)

// prop value enum
func (o *GetTransactionsTransfersBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getTransactionsTransfersBodyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetTransactionsTransfersBody) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("body"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get transactions transfers body based on context it is used
func (o *GetTransactionsTransfersBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionsTransfersBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionsTransfersBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionsTransfersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTransactionsTransfersOKBodyItems0 get transactions transfers o k body items0
//
// swagger:model GetTransactionsTransfersOKBodyItems0
type GetTransactionsTransfersOKBodyItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// commission
	Commission string `json:"commission,omitempty"`

	// currency
	Currency string `json:"currency,omitempty"`

	// date
	Date string `json:"date,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// operation
	// Enum: ["deposit","withdrawal"]
	Operation string `json:"operation,omitempty"`

	// status
	// Enum: ["finished","processing","cancelled"]
	Status string `json:"status,omitempty"`
}

// Validate validates this get transactions transfers o k body items0
func (o *GetTransactionsTransfersOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getTransactionsTransfersOKBodyItems0TypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deposit","withdrawal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getTransactionsTransfersOKBodyItems0TypeOperationPropEnum = append(getTransactionsTransfersOKBodyItems0TypeOperationPropEnum, v)
	}
}

const (

	// GetTransactionsTransfersOKBodyItems0OperationDeposit captures enum value "deposit"
	GetTransactionsTransfersOKBodyItems0OperationDeposit string = "deposit"

	// GetTransactionsTransfersOKBodyItems0OperationWithdrawal captures enum value "withdrawal"
	GetTransactionsTransfersOKBodyItems0OperationWithdrawal string = "withdrawal"
)

// prop value enum
func (o *GetTransactionsTransfersOKBodyItems0) validateOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getTransactionsTransfersOKBodyItems0TypeOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetTransactionsTransfersOKBodyItems0) validateOperation(formats strfmt.Registry) error {
	if swag.IsZero(o.Operation) { // not required
		return nil
	}

	// value enum
	if err := o.validateOperationEnum("operation", "body", o.Operation); err != nil {
		return err
	}

	return nil
}

var getTransactionsTransfersOKBodyItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["finished","processing","cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getTransactionsTransfersOKBodyItems0TypeStatusPropEnum = append(getTransactionsTransfersOKBodyItems0TypeStatusPropEnum, v)
	}
}

const (

	// GetTransactionsTransfersOKBodyItems0StatusFinished captures enum value "finished"
	GetTransactionsTransfersOKBodyItems0StatusFinished string = "finished"

	// GetTransactionsTransfersOKBodyItems0StatusProcessing captures enum value "processing"
	GetTransactionsTransfersOKBodyItems0StatusProcessing string = "processing"

	// GetTransactionsTransfersOKBodyItems0StatusCancelled captures enum value "cancelled"
	GetTransactionsTransfersOKBodyItems0StatusCancelled string = "cancelled"
)

// prop value enum
func (o *GetTransactionsTransfersOKBodyItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getTransactionsTransfersOKBodyItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetTransactionsTransfersOKBodyItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get transactions transfers o k body items0 based on context it is used
func (o *GetTransactionsTransfersOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionsTransfersOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionsTransfersOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetTransactionsTransfersOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

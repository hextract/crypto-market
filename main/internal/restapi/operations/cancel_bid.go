// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/h4x4d/crypto-market/main/internal/models"
)

// CancelBidHandlerFunc turns a function with the right signature into a cancel bid handler
type CancelBidHandlerFunc func(CancelBidParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn CancelBidHandlerFunc) Handle(params CancelBidParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// CancelBidHandler interface for that can handle valid cancel bid params
type CancelBidHandler interface {
	Handle(CancelBidParams, *models.User) middleware.Responder
}

// NewCancelBid creates a new http.Handler for the cancel bid operation
func NewCancelBid(ctx *middleware.Context, handler CancelBidHandler) *CancelBid {
	return &CancelBid{Context: ctx, Handler: handler}
}

/*
	CancelBid swagger:route DELETE /market/{bid_id} cancelBid

Cancel bid
*/
type CancelBid struct {
	Context *middleware.Context
	Handler CancelBidHandler
}

func (o *CancelBid) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCancelBidParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CancelBidOKBody cancel bid o k body
//
// swagger:model CancelBidOKBody
type CancelBidOKBody struct {

	// id
	ID string `json:"id,omitempty"`

	// status
	// Enum: ["cancelled"]
	Status string `json:"status,omitempty"`
}

// Validate validates this cancel bid o k body
func (o *CancelBidOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cancelBidOKBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cancelBidOKBodyTypeStatusPropEnum = append(cancelBidOKBodyTypeStatusPropEnum, v)
	}
}

const (

	// CancelBidOKBodyStatusCancelled captures enum value "cancelled"
	CancelBidOKBodyStatusCancelled string = "cancelled"
)

// prop value enum
func (o *CancelBidOKBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cancelBidOKBodyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CancelBidOKBody) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("cancelBidOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cancel bid o k body based on context it is used
func (o *CancelBidOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CancelBidOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CancelBidOKBody) UnmarshalBinary(b []byte) error {
	var res CancelBidOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

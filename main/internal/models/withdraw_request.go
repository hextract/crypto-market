// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WithdrawRequest withdraw request
//
// swagger:model withdraw_request
type WithdrawRequest struct {

	// address
	// Example: 0x1234567890abcdef1234567890abcdef12345678
	// Required: true
	Address *string `json:"address"`

	// amount
	// Example: 100.5
	// Required: true
	// Minimum: 0
	// Multiple Of: 1e-08
	Amount *float32 `json:"amount"`

	// currency
	// Example: USDT
	// Required: true
	// Enum: ["USDT","BTC"]
	Currency *string `json:"currency"`
}

// Validate validates this withdraw request
func (m *WithdrawRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WithdrawRequest) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *WithdrawRequest) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.Minimum("amount", "body", float64(*m.Amount), 0, false); err != nil {
		return err
	}

	if err := validate.MultipleOf("amount", "body", float64(*m.Amount), 1e-08); err != nil {
		return err
	}

	return nil
}

var withdrawRequestTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USDT","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		withdrawRequestTypeCurrencyPropEnum = append(withdrawRequestTypeCurrencyPropEnum, v)
	}
}

const (

	// WithdrawRequestCurrencyUSDT captures enum value "USDT"
	WithdrawRequestCurrencyUSDT string = "USDT"

	// WithdrawRequestCurrencyBTC captures enum value "BTC"
	WithdrawRequestCurrencyBTC string = "BTC"
)

// prop value enum
func (m *WithdrawRequest) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, withdrawRequestTypeCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WithdrawRequest) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", *m.Currency); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this withdraw request based on context it is used
func (m *WithdrawRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WithdrawRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WithdrawRequest) UnmarshalBinary(b []byte) error {
	var res WithdrawRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

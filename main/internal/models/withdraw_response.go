// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WithdrawResponse withdraw response
//
// swagger:model withdraw_response
type WithdrawResponse struct {

	// id
	// Example: tx_with_some-uuid
	// Required: true
	ID *string `json:"id"`

	// status
	// Example: pending
	// Required: true
	// Enum: ["pending","finished","cancelled"]
	Status *string `json:"status"`
}

// Validate validates this withdraw response
func (m *WithdrawResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WithdrawResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var withdrawResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","finished","cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		withdrawResponseTypeStatusPropEnum = append(withdrawResponseTypeStatusPropEnum, v)
	}
}

const (

	// WithdrawResponseStatusPending captures enum value "pending"
	WithdrawResponseStatusPending string = "pending"

	// WithdrawResponseStatusFinished captures enum value "finished"
	WithdrawResponseStatusFinished string = "finished"

	// WithdrawResponseStatusCancelled captures enum value "cancelled"
	WithdrawResponseStatusCancelled string = "cancelled"
)

// prop value enum
func (m *WithdrawResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, withdrawResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WithdrawResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this withdraw response based on context it is used
func (m *WithdrawResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WithdrawResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WithdrawResponse) UnmarshalBinary(b []byte) error {
	var res WithdrawResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

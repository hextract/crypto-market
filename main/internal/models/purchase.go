// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Purchase purchase
//
// swagger:model purchase
type Purchase struct {

	// amount from
	// Example: 100.5
	// Required: true
	// Minimum: 0
	// Multiple Of: 1e-08
	AmountFrom *float32 `json:"amount_from"`

	// amount to
	// Example: 0.005
	// Required: true
	// Minimum: 0
	// Multiple Of: 1e-08
	AmountTo *float32 `json:"amount_to"`

	// currency from
	// Example: USDT
	// Required: true
	// Enum: ["USDT","BTC"]
	CurrencyFrom *string `json:"currency_from"`

	// currency to
	// Example: BTC
	// Required: true
	// Enum: ["USDT","BTC"]
	CurrencyTo *string `json:"currency_to"`

	// date
	// Example: 1747036800
	// Required: true
	Date *int64 `json:"date"`

	// id
	// Example: bid_123
	// Required: true
	ID *string `json:"id"`

	// status
	// Example: finished
	// Required: true
	// Enum: ["finished","processing","cancelled","pending"]
	Status *string `json:"status"`
}

// Validate validates this purchase
func (m *Purchase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmountTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencyFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencyTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Purchase) validateAmountFrom(formats strfmt.Registry) error {

	if err := validate.Required("amount_from", "body", m.AmountFrom); err != nil {
		return err
	}

	if err := validate.Minimum("amount_from", "body", float64(*m.AmountFrom), 0, false); err != nil {
		return err
	}

	if err := validate.MultipleOf("amount_from", "body", float64(*m.AmountFrom), 1e-08); err != nil {
		return err
	}

	return nil
}

func (m *Purchase) validateAmountTo(formats strfmt.Registry) error {

	if err := validate.Required("amount_to", "body", m.AmountTo); err != nil {
		return err
	}

	if err := validate.Minimum("amount_to", "body", float64(*m.AmountTo), 0, false); err != nil {
		return err
	}

	if err := validate.MultipleOf("amount_to", "body", float64(*m.AmountTo), 1e-08); err != nil {
		return err
	}

	return nil
}

var purchaseTypeCurrencyFromPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USDT","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		purchaseTypeCurrencyFromPropEnum = append(purchaseTypeCurrencyFromPropEnum, v)
	}
}

const (

	// PurchaseCurrencyFromUSDT captures enum value "USDT"
	PurchaseCurrencyFromUSDT string = "USDT"

	// PurchaseCurrencyFromBTC captures enum value "BTC"
	PurchaseCurrencyFromBTC string = "BTC"
)

// prop value enum
func (m *Purchase) validateCurrencyFromEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, purchaseTypeCurrencyFromPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Purchase) validateCurrencyFrom(formats strfmt.Registry) error {

	if err := validate.Required("currency_from", "body", m.CurrencyFrom); err != nil {
		return err
	}

	// value enum
	if err := m.validateCurrencyFromEnum("currency_from", "body", *m.CurrencyFrom); err != nil {
		return err
	}

	return nil
}

var purchaseTypeCurrencyToPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USDT","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		purchaseTypeCurrencyToPropEnum = append(purchaseTypeCurrencyToPropEnum, v)
	}
}

const (

	// PurchaseCurrencyToUSDT captures enum value "USDT"
	PurchaseCurrencyToUSDT string = "USDT"

	// PurchaseCurrencyToBTC captures enum value "BTC"
	PurchaseCurrencyToBTC string = "BTC"
)

// prop value enum
func (m *Purchase) validateCurrencyToEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, purchaseTypeCurrencyToPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Purchase) validateCurrencyTo(formats strfmt.Registry) error {

	if err := validate.Required("currency_to", "body", m.CurrencyTo); err != nil {
		return err
	}

	// value enum
	if err := m.validateCurrencyToEnum("currency_to", "body", *m.CurrencyTo); err != nil {
		return err
	}

	return nil
}

func (m *Purchase) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	return nil
}

func (m *Purchase) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var purchaseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["finished","processing","cancelled","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		purchaseTypeStatusPropEnum = append(purchaseTypeStatusPropEnum, v)
	}
}

const (

	// PurchaseStatusFinished captures enum value "finished"
	PurchaseStatusFinished string = "finished"

	// PurchaseStatusProcessing captures enum value "processing"
	PurchaseStatusProcessing string = "processing"

	// PurchaseStatusCancelled captures enum value "cancelled"
	PurchaseStatusCancelled string = "cancelled"

	// PurchaseStatusPending captures enum value "pending"
	PurchaseStatusPending string = "pending"
)

// prop value enum
func (m *Purchase) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, purchaseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Purchase) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this purchase based on context it is used
func (m *Purchase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Purchase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Purchase) UnmarshalBinary(b []byte) error {
	var res Purchase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

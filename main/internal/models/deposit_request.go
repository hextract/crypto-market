// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DepositRequest deposit request
//
// swagger:model deposit_request
type DepositRequest struct {

	// currency
	// Example: USDT
	// Required: true
	// Enum: ["USDT","BTC"]
	Currency *string `json:"currency"`
}

// Validate validates this deposit request
func (m *DepositRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var depositRequestTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USDT","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		depositRequestTypeCurrencyPropEnum = append(depositRequestTypeCurrencyPropEnum, v)
	}
}

const (

	// DepositRequestCurrencyUSDT captures enum value "USDT"
	DepositRequestCurrencyUSDT string = "USDT"

	// DepositRequestCurrencyBTC captures enum value "BTC"
	DepositRequestCurrencyBTC string = "BTC"
)

// prop value enum
func (m *DepositRequest) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, depositRequestTypeCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DepositRequest) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", *m.Currency); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this deposit request based on context it is used
func (m *DepositRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DepositRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DepositRequest) UnmarshalBinary(b []byte) error {
	var res DepositRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

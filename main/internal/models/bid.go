// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Bid bid
//
// swagger:model bid
type Bid struct {

	// amount to buy
	// Multiple Of: 1e-07
	AmountToBuy float64 `json:"amount_to_buy,omitempty"`

	// bid id
	BidID int64 `json:"bid_id,omitempty"`

	// bought amount
	// Multiple Of: 1e-07
	BoughtAmount float64 `json:"bought_amount,omitempty"`

	// buy speed
	// Multiple Of: 1e-07
	BuySpeed float64 `json:"buy_speed,omitempty"`

	// max price
	// Multiple Of: 1e-07
	MaxPrice float64 `json:"max_price,omitempty"`

	// min price
	// Multiple Of: 1e-07
	MinPrice float64 `json:"min_price,omitempty"`

	// user id
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this bid
func (m *Bid) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountToBuy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBoughtAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuySpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Bid) validateAmountToBuy(formats strfmt.Registry) error {
	if swag.IsZero(m.AmountToBuy) { // not required
		return nil
	}

	if err := validate.MultipleOf("amount_to_buy", "body", m.AmountToBuy, 1e-07); err != nil {
		return err
	}

	return nil
}

func (m *Bid) validateBoughtAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.BoughtAmount) { // not required
		return nil
	}

	if err := validate.MultipleOf("bought_amount", "body", m.BoughtAmount, 1e-07); err != nil {
		return err
	}

	return nil
}

func (m *Bid) validateBuySpeed(formats strfmt.Registry) error {
	if swag.IsZero(m.BuySpeed) { // not required
		return nil
	}

	if err := validate.MultipleOf("buy_speed", "body", m.BuySpeed, 1e-07); err != nil {
		return err
	}

	return nil
}

func (m *Bid) validateMaxPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxPrice) { // not required
		return nil
	}

	if err := validate.MultipleOf("max_price", "body", m.MaxPrice, 1e-07); err != nil {
		return err
	}

	return nil
}

func (m *Bid) validateMinPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.MinPrice) { // not required
		return nil
	}

	if err := validate.MultipleOf("min_price", "body", m.MinPrice, 1e-07); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this bid based on context it is used
func (m *Bid) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Bid) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Bid) UnmarshalBinary(b []byte) error {
	var res Bid
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

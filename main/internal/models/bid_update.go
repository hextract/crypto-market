// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BidUpdate bid update
//
// swagger:model bid_update
type BidUpdate struct {

	// bought amount
	// Minimum: 0
	BoughtAmount *float32 `json:"bought_amount,omitempty"`

	// order id
	// Required: true
	OrderID *string `json:"order_id"`

	// paid price
	// Minimum: 0
	PaidPrice *float32 `json:"paid_price,omitempty"`

	// status
	// Required: true
	// Enum: ["finished","cancelled","partial"]
	Status *string `json:"status"`
}

// Validate validates this bid update
func (m *BidUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoughtAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaidPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BidUpdate) validateBoughtAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.BoughtAmount) { // not required
		return nil
	}

	if err := validate.Minimum("bought_amount", "body", float64(*m.BoughtAmount), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *BidUpdate) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("order_id", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *BidUpdate) validatePaidPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.PaidPrice) { // not required
		return nil
	}

	if err := validate.Minimum("paid_price", "body", float64(*m.PaidPrice), 0, false); err != nil {
		return err
	}

	return nil
}

var bidUpdateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["finished","cancelled","partial"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bidUpdateTypeStatusPropEnum = append(bidUpdateTypeStatusPropEnum, v)
	}
}

const (

	// BidUpdateStatusFinished captures enum value "finished"
	BidUpdateStatusFinished string = "finished"

	// BidUpdateStatusCancelled captures enum value "cancelled"
	BidUpdateStatusCancelled string = "cancelled"

	// BidUpdateStatusPartial captures enum value "partial"
	BidUpdateStatusPartial string = "partial"
)

// prop value enum
func (m *BidUpdate) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bidUpdateTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BidUpdate) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this bid update based on context it is used
func (m *BidUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BidUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BidUpdate) UnmarshalBinary(b []byte) error {
	var res BidUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

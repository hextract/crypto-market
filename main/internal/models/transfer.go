// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Transfer transfer
//
// swagger:model transfer
type Transfer struct {

	// address
	// Example: 0x1234567890abcdef1234567890abcdef12345678
	Address string `json:"address,omitempty"`

	// amount
	// Example: 100.5
	// Required: true
	// Minimum: 0
	Amount *float32 `json:"amount"`

	// commission
	// Example: 0.1
	// Minimum: 0
	Commission *float32 `json:"commission,omitempty"`

	// currency
	// Example: USDT
	// Required: true
	// Enum: ["USDT","BTC"]
	Currency *string `json:"currency"`

	// date
	// Example: 1747036800
	// Required: true
	Date *int64 `json:"date"`

	// id
	// Example: tx_dep_123456
	// Required: true
	ID *string `json:"id"`

	// operation
	// Example: deposit
	// Required: true
	// Enum: ["deposit","withdraw"]
	Operation *string `json:"operation"`

	// status
	// Example: finished
	// Required: true
	// Enum: ["finished","processing","cancelled","pending"]
	Status *string `json:"status"`
}

// Validate validates this transfer
func (m *Transfer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transfer) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.Minimum("amount", "body", float64(*m.Amount), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Transfer) validateCommission(formats strfmt.Registry) error {
	if swag.IsZero(m.Commission) { // not required
		return nil
	}

	if err := validate.Minimum("commission", "body", float64(*m.Commission), 0, false); err != nil {
		return err
	}

	return nil
}

var transferTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USDT","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transferTypeCurrencyPropEnum = append(transferTypeCurrencyPropEnum, v)
	}
}

const (

	// TransferCurrencyUSDT captures enum value "USDT"
	TransferCurrencyUSDT string = "USDT"

	// TransferCurrencyBTC captures enum value "BTC"
	TransferCurrencyBTC string = "BTC"
)

// prop value enum
func (m *Transfer) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, transferTypeCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Transfer) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", *m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *Transfer) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	return nil
}

func (m *Transfer) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var transferTypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deposit","withdraw"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transferTypeOperationPropEnum = append(transferTypeOperationPropEnum, v)
	}
}

const (

	// TransferOperationDeposit captures enum value "deposit"
	TransferOperationDeposit string = "deposit"

	// TransferOperationWithdraw captures enum value "withdraw"
	TransferOperationWithdraw string = "withdraw"
)

// prop value enum
func (m *Transfer) validateOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, transferTypeOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Transfer) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", *m.Operation); err != nil {
		return err
	}

	return nil
}

var transferTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["finished","processing","cancelled","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transferTypeStatusPropEnum = append(transferTypeStatusPropEnum, v)
	}
}

const (

	// TransferStatusFinished captures enum value "finished"
	TransferStatusFinished string = "finished"

	// TransferStatusProcessing captures enum value "processing"
	TransferStatusProcessing string = "processing"

	// TransferStatusCancelled captures enum value "cancelled"
	TransferStatusCancelled string = "cancelled"

	// TransferStatusPending captures enum value "pending"
	TransferStatusPending string = "pending"
)

// prop value enum
func (m *Transfer) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, transferTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Transfer) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this transfer based on context it is used
func (m *Transfer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Transfer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transfer) UnmarshalBinary(b []byte) error {
	var res Transfer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

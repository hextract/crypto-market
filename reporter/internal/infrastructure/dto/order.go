// Code generated by go-swagger; DO NOT EDIT.

package dto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Order order
//
// swagger:model Order
type Order struct {

	// indicator
	// Required: true
	// Enum: ["buy","sell"]
	Indicator *string `json:"indicator"`

	// price
	// Required: true
	Price *float64 `json:"price"`

	// ticker
	// Required: true
	Ticker *string `json:"ticker"`

	// type
	// Required: true
	// Enum: ["market","limit"]
	Type *string `json:"type"`

	// user id
	// Required: true
	UserID *int64 `json:"user_id"`

	// volume
	// Required: true
	Volume *float64 `json:"volume"`
}

// Validate validates this order
func (m *Order) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicker(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var orderTypeIndicatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["buy","sell"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderTypeIndicatorPropEnum = append(orderTypeIndicatorPropEnum, v)
	}
}

const (

	// OrderIndicatorBuy captures enum value "buy"
	OrderIndicatorBuy string = "buy"

	// OrderIndicatorSell captures enum value "sell"
	OrderIndicatorSell string = "sell"
)

// prop value enum
func (m *Order) validateIndicatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderTypeIndicatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Order) validateIndicator(formats strfmt.Registry) error {

	if err := validate.Required("indicator", "body", m.Indicator); err != nil {
		return err
	}

	// value enum
	if err := m.validateIndicatorEnum("indicator", "body", *m.Indicator); err != nil {
		return err
	}

	return nil
}

func (m *Order) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateTicker(formats strfmt.Registry) error {

	if err := validate.Required("ticker", "body", m.Ticker); err != nil {
		return err
	}

	return nil
}

var orderTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["market","limit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderTypeTypePropEnum = append(orderTypeTypePropEnum, v)
	}
}

const (

	// OrderTypeMarket captures enum value "market"
	OrderTypeMarket string = "market"

	// OrderTypeLimit captures enum value "limit"
	OrderTypeLimit string = "limit"
)

// prop value enum
func (m *Order) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Order) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateVolume(formats strfmt.Registry) error {

	if err := validate.Required("volume", "body", m.Volume); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this order based on context it is used
func (m *Order) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Order) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Order) UnmarshalBinary(b []byte) error {
	var res Order
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"generator/internal/application/use_cases"
	"generator/internal/di/providers"
	"generator/internal/infrastructure/adapters/queues/kafka"
	"generator/internal/infrastructure/adapters/repositories"
	"generator/internal/infrastructure/adapters/senders"
	"generator/internal/infrastructure/services"
)

// Injectors from wire.go:

func InitializeServiceLocator() (*ServiceLocator, error) {
	continuousOrderSender, err := senders.NewContinuousOrderSender()
	if err != nil {
		return nil, err
	}
	sendContinuousOrderUseCase, err := use_cases.NewSendContinuousOrderUseCase(continuousOrderSender)
	if err != nil {
		return nil, err
	}
	v, err := providers.KafkaBrokersProvider()
	if err != nil {
		return nil, err
	}
	consumer, err := kafka.NewConsumer(v)
	if err != nil {
		return nil, err
	}
	string2, err := providers.SnapshotsTopicProvider()
	if err != nil {
		return nil, err
	}
	orderBookSnaphotsRepository, err := repositories.NewOrderBookSnaphotsRepository(consumer, string2)
	if err != nil {
		return nil, err
	}
	getSnapshotUseCase, err := use_cases.NewGetSnapshotUseCase(orderBookSnaphotsRepository)
	if err != nil {
		return nil, err
	}
	createContinuousOrderFromOrderBookSnapshotUseCase, err := use_cases.NewCreateContinuousOrderUseCase()
	if err != nil {
		return nil, err
	}
	syntheticContinuousOrdersProcessor, err := services.NewSyntheticContinuousOrdersProcessor(sendContinuousOrderUseCase, getSnapshotUseCase, createContinuousOrderFromOrderBookSnapshotUseCase)
	if err != nil {
		return nil, err
	}
	serviceLocator, err := newServiceLocator(syntheticContinuousOrdersProcessor)
	if err != nil {
		return nil, err
	}
	return serviceLocator, nil
}

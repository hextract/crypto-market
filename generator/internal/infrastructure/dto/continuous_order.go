// Code generated by go-swagger; DO NOT EDIT.

package dto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContinuousOrder continuous order
//
// swagger:model ContinuousOrder
type ContinuousOrder struct {

	// Amount to trade
	// Example: 6000
	// Required: true
	Amount *float64 `json:"amount"`

	// true for buy, false for sell
	// Example: true
	// Required: true
	BuySellIndicator *bool `json:"buy_sell_indicator"`

	// Unique order identifier
	// Example: 123
	// Required: true
	OrderID *int64 `json:"order_id"`

	// Trading pair (e.g., ETH/USDT)
	// Example: ["ETH","USDT"]
	// Required: true
	Pair []string `json:"pair"`

	// Maximum acceptable price
	// Example: 10
	// Required: true
	PriceHigh *float64 `json:"price_high"`

	// Minimum acceptable price
	// Example: 5
	// Required: true
	PriceLow *float64 `json:"price_low"`

	// Speed of order generation in milliseconds
	// Example: 72000
	// Required: true
	Speed *float64 `json:"speed"`
}

// Validate validates this continuous order
func (m *ContinuousOrder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuySellIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePair(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceHigh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceLow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContinuousOrder) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *ContinuousOrder) validateBuySellIndicator(formats strfmt.Registry) error {

	if err := validate.Required("buy_sell_indicator", "body", m.BuySellIndicator); err != nil {
		return err
	}

	return nil
}

func (m *ContinuousOrder) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("order_id", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *ContinuousOrder) validatePair(formats strfmt.Registry) error {

	if err := validate.Required("pair", "body", m.Pair); err != nil {
		return err
	}

	return nil
}

func (m *ContinuousOrder) validatePriceHigh(formats strfmt.Registry) error {

	if err := validate.Required("price_high", "body", m.PriceHigh); err != nil {
		return err
	}

	return nil
}

func (m *ContinuousOrder) validatePriceLow(formats strfmt.Registry) error {

	if err := validate.Required("price_low", "body", m.PriceLow); err != nil {
		return err
	}

	return nil
}

func (m *ContinuousOrder) validateSpeed(formats strfmt.Registry) error {

	if err := validate.Required("speed", "body", m.Speed); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this continuous order based on context it is used
func (m *ContinuousOrder) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ContinuousOrder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContinuousOrder) UnmarshalBinary(b []byte) error {
	var res ContinuousOrder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
